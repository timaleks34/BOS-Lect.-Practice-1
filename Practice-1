#!/bin/bash

print()
{
  echo "-u, --users - Вывод пользователей и их домашних директорий"
  echo "-p, --processes - Вывод перечня запущенных процессов, отсортированных по идентификатору"
  echo "-h, --help - Вывод справки с перечнем и описанием аргументов и остановка работы"
  echo "-l, --log PATH - Замещение вывода на экран выводом в файл по пути PATH"
  echo "-e, --errors PATH - Замещение вывода ошибок из потока stderr в файл по пути PATH"
}

users()
{
  awk -F: '$3 >= 1000 {print $1 "\t" $6}' /etc/passwd | sort
}

process()
{
  ps -e -o pid,cmd,start --sort=pid
}

path()
{
  local path="$1"
  if [[ ! -w "$path" ]]; then
    echo "Нет доступа к файлу $path" >&2
    if [ -n "$ERRO" ]; then
      echo "Ошибка записи в файл $path" >> "$ERRO"
    fi
    exit 1
  fi
}

while getopts "upl:e:h-:" opt; do
    case "${opt}" in
    u)
        users
        ;;
    p)
        process
        ;;
    l)
        LOGI="${OPTARG}"
        path "${LOGI}"
        ;;
    e)
        ERRO="${OPTARG}"
        path "${ERRO}"
        ;;
    h)
        print
        exit 0
        ;;
    -)
        case "${OPTARG}" in
          users)
                users
                ;;
          process)
                process
                ;;
          help)
                print
                exit 0
                ;;
          log)
                LOGI="${!OPTIND}"; OPTIND=$((OPTIND+1))
                path "${LOGI}"
                ;;
          errors)
                ERRO="${!OPTIND}"; OPTIND=$((OPTIND+1))
                path "${ERRO}"
                ;;
          *)
                echo "Неизвестная функция --${OPTARG}" >&2
                if [ -n "$ERRO" ]; then
                  echo "Неизвестная функция --${OPTARG}" >> "$ERRO"
                fi
                print
                exit 1
                ;;
        esac
        ;;

    *)
        echo "Неизвестная функция -${OPTARG}" >&2
        if [ -n "$ERRO" ]; then
          echo "Неизвестная функция -${OPTARG}" >> "$ERRO"
        fi
        print
        exit 1
        ;;
  esac
done

if [[ -n "$LOGI" ]]; then
  {
    users
    process
  } >> "$LOGI" 2>&1
fi
if [[ -n "$ERRO" ]]; then
  if [[ ! -s "$ERRO" ]]; then
    echo "Без ошибок" >> "$ERRO"
  fi
fi
